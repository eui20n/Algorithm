# 기차가 어둠을 헤치고 은하수를
# N개의 기차가 어둠을 헤치고 은하수를 건너려고 한다
# 기차는 20개의 일렬로 된 좌석이 있고, 한 개의 좌석에는 한 명의 사람이 탈 수 있다
# 기차의 번호를 1번부터 N번으로 매길 때, 어떠한 기차에 대한 M개의 명령이 주어진다
# 명령은 아래의 4종류이다
# 1. i x : i번째 기차에 x번째 좌석에 사람을 태워라. 이미 사람이 타있다면, 아무런 행동을 하지 않는다
# 2. i x : i번째 기차에 x번째 좌석에 앉은 사람은 하차한다. 만약 아무도 그 자리에 앉아있지 않았다면, 아무런 행동을 하지 않는다
# 3. i : i번째 기차에 앉아있는 승객들이 모두 한칸씩 뒤로 간다. k번째 앉은 사람은 k+1번째로 이동하여 앉는다. 만약 20번째 자리에 사람이 앉아있었다면 그 사람은 이 명령 후에 하차한다 -> 한칸 뒤로
# 4. i : i번째 기차에 앉아있는 승객들이 모두 한칸씩 앞으로 간다. k번째 앉은 사람은 k-1번째 자리로 이동하여 앉는다. 만약 1번째 자리에 사람이 앉아있었다면 그 사람은 이 명령 후에 하차한다 -> 한칸 앞으로
# M번의 명령 후에 1번째 기차 부터 순서대로 한 기차씩 은하수를 건너는데 조건이 있다
# 기차는 순서대로 지나가며 기차가 지나갈 때 승객이 앉은 상태를 목록에 기록하며 이미 목록에 존재하는 기록이라면 해당 기차는 은하수를 건널 수 없다 -> 같은 숫자라면 못감
# 처음에 주어진 기차에 승객은 아무도 없다
# 이때 은하수를 건널 수 있는 기차의 수를 출력해라


K,C = map(int,input().split())
command = [list(map(int,input().split())) for _ in range(C)]

# 기차의 수에 맞게 리스트를 생성, 0인 이유는 0이 이진수로 0이기 때문
ktx = [0] * K

# 명령 만큼 반복
for x in command:
    if x[0] == 1:
        # 명령이 1이면 x[2]-1 좌석에 1을 추가 -> x[2] - 1인 이유는 이진수의 처음은 2^0이기 때문에 이 자리도 포함하기 위해서
        ktx[x[1]-1] |= (1 << x[2]-1)
    elif x[0] == 2:
        # 명령이 2이면 x[2]-1좌석에 0을 추가 -> 1을 제거
        ktx[x[1]-1] &= ~(1 << x[2]-1)
    elif x[0] == 3:
        # 왼쪽으로 감, 그리고 20번째 자리를 0으로 해줌
        ktx[x[1]-1] = ktx[x[1]-1] << 1
        ktx[x[1]-1] &= ~(1 << 20)
    elif x[0] == 4:
        # 오른쪽으로 감, 첫번째는 알아서 0이 되기때문에 위에서 처럼 하지 않음
        ktx[x[1]-1] = ktx[x[1]-1] >> 1

# 중복을 제외한 길이를 출력하면 되기 때문에 set(ktx)의 길이를 출력함
print(len(set(ktx)))
    
        
