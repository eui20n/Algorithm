# 청소년 상어
# 4 by 4 공간에 1 by 1인 정사각형 칸으로 나누어져 있다. 각 공간은 x,y로 표현가능하다
# 한 칸에 물고기가 한 마리 존재하고, 물고기는 번호와 방향을 가지고 있다
# 번호는 1 이상, 16이하의 자연수이며, 번호가 같은 물고기는 없다, 또한 방향은 상하좌우,대각선 8방향이며 한 방향을 갖는다
# 청소년 상어는 (0,0)위치에 들어가고 (0,0)위치의 물고기를 먹는다
# 상어의 방향은 먹은 물고기의 방향과 동일하다
# 상어가 먹은 후 물고기가 이동을 한다
# 물고기는 번호가 작은 물고기부터 순서대로 이동한다
# 물고기는 한 칸을 이동할 수 있고, 상어가 있거나 범위를 벗어나는 값 때고는 다 이동가능 하다
# 각 물고기는 이동할 수 있을때까지 45도 반시계 회전한다, 만약 이동할 수 있는 칸이 없으면 이동을 안한다
# 그 외의 경우 이동을 하면 그 칸에 있는 물고기와 위치를 바꾼다
# 물고기의 이동이 끝나면 상어가 방향의 칸으로 이동하며 여러칸 이동 가능하다
# 이동하는 칸 중간에 있는 물고기는 먹지 않고, 물고기를 먹으면 그 물고기의 방향을 가지게 된다
# 또한 물고기가 없는 칸으로는 이동할 수 없다
# 상어가 이동할 수 있는 칸이 더이상 없으면 상어는 집으로간다
# 상어가 이동할 칸이 없을때까지 이 과정을 반복한다
# 상어가 먹을 수 있는 물고기의 최대값을 구하여라
# 입력은 각 칸의 물고기의 번화 방향이 주어진다
# 방향은 북(1) 북서(2) 서(3) 서남(4) 남(5) 남동(6) 동(7) 동북(8)

graph = []
dir = []

# 물고기의 크기와 상어가 있는 리스트와, 방향이 있는 리스트로 구분
for x in range(4):
    a = list(map(int,input().split()))
    graph.append([a[0],a[2],a[4],a[6]])
    dir.append([a[1],a[3],a[5],a[7]])
    
# key - value 형태로 저장해서 사용하기 쉽게 만듬
move_dir = {1:[-1,0], 2:[-1,-1], 3:[0,-1], 4:[1,-1], 5:[1,0], 6:[1,1], 7:[0,1], 8:[-1,1]}


visited = [[False for _ in range(4)] for _ in range(4)] # 이거 필요 없을 수도, 어차피 이동한 곳의 graph가 바뀌어서 방문처리 안해도 됨

def fish_move():
    pass

def dfs():
    pass
    
# 생각할 것 -> 백트래킹 ==> 물고기가 이동한 후 이동하기 전으로 바꿀 수 있어야함
# 순서 : 상어가 이동 -> 물고기 바꿈 ==> 만약 상어가 이동 후 갈곳이 없으면 바로 종료, 물고기 이동 안함
    